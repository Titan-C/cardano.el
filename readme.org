#+TITLE: An Emacs interface to cardano

This project is a running experiment and in Alpha stage. Don't rely on any of
its functions or interfaces to be stable, because I'm still testing this user
interface.

Today, for the Cardano Summit 2021 and the Plutus Pioneer Capstone.
* Motivation

https://cardano.ideascale.com/a/dtd/Transaction-editor-to-replace-cli/370256-48088

* Installation
This project is not on MELPA, you must install it yourself and deal with all
dependencies as well.
** Dependencies
*** Cardano Node
You need a running Cardano node you can connect to. The easiest way to get one setup for the public testenet is using this repo: https://github.com/input-output-hk/testnet-summit-scripts
*** Libyaml
Install in your OS =libyaml= and the emacs bindings =emacs-libyaml=
https://github.com/syohex/emacs-libyaml

The Emacs binding aren't in MELPA either you must install them manually and have
them on your =EMACSLOADPATH=

*** Emacs 27
This is the latest release and it is required for the native support for JSON parsing, make also sure it is compiled with =--with-modules=, you need that for the =emacs-libyaml= binding.

Additionally, these packages are required:
- dash
- yaml-mode
- helm

*** This package itself
Make sure this repo is also in your =EMACSLOADPATH=, then evaluate the file =cardano-tx.el=.
* Configuration
There are some variables you need to configure.

#+begin_src emacs-lisp
;; Path to cli tool
(setq cardano-cli-command "/full/path/to/the/cardano-cli")
;; Path to the running node socket
(setq cardano-cli-node-socket "/full/path/to/the/testnet/socket")
;; This directory will store all your key pairs (verification & signinig) and
;; the addresses that are generated with those keys. It also holds your staking
;; key. BE sure this folder exists, It will not be created by this tool yet
(setq cardano-address-keyring-dir (expand-file-name "~/wallet/"))
;; These are the network arguments for the testenet
(setq cardano-cli-network-args '("--testnet-magic" "1097911063"))
#+end_src
* Usage
Start by interactively querying the tip of the Blockchain. Use: =M-x
cardano-cli-tip=, you should see on the bottom of the screen on the minibuffer
the information about the tip.

At the time of writing it showed this:
#+begin_src yaml
epoch: 158
hash: 8b6c54c50355c945c2c9fcf354869651d60c129c86fd1be3b8c3d35273352569
slot: 38212104
block: 2941331
era: Alonzo
syncProgress: 100.00
#+end_src
** Creating new key pairs and addresses
To create new keys and their address use: =M-x cardano-address-new-key-files=.
It will prompt you how to name your new keys/wallet. Type a name or many space
separated names. This will populate the directory you defined in
=cardano-address-keyring-dir=, with the keys. It will also create a staking key
for the directory and finally create the corresponding wallet addresses with the
staking key.

This means:
#+begin_src emacs-lisp
M-x cardano-address-new-key-files RET first second third
#+end_src
will generated this folder structure

#+RESULTS:
~/wallet/
├── first.addr
├── first.skey
├── first.vkey
├── second.addr
├── second.skey
├── second.vkey
├── stake.skey
├── stake.stake-addr
├── stake.vkey
├── third.addr
├── third.skey
└── third.vkey

Go ahead and fund any of these addresses
** Crafting a transaction
I recorded a demo video, now a bit outdated
https://www.youtube.com/watch?v=ocSzYLmYPMQ, but you can get the idea of the
workflow to create a transaction.

The goal is to directly create the transaction in your editor instead of using
the CLI to instruct by commands the crafting of the transaction.

To launch the editor call =M-x cardano-tx-new=. This opens a buffer with already
a transaction template you can directly edit. Let's create a simple spending
transaction where we start with our funded UTxO and spend it to fund some plutus
scripts.
*** Spending and sending funds to Plutus script addresses
Have a look at the next annotated example. It is a simple yaml file. You obey
the YAML syntax, so that =libyaml= can parse this file. The structure reflects
intuitively what the transaction itself is.
#+begin_src yaml
# This are the inputs for the transaction.
inputs:
  # Enumerations are vectors. Here each item, signaled with (-) is an input
  - utxo: 3298217086ef8e8eab2db0b5856618b27b9185f79dc8cc56bf85e34e9a080e0d#0

# Outputs are defined in the same way.
outputs:
  - address: addr_test1vznwk2s30nyvtgn20z27kqlnezxn6gu3ud8f3zyrxfae3ycqqa7ze # second
    change: true # This this the change address, it is balanced by the cardano-cli
  # This next output is a plutus script address.
  - address: addr_test1wzxfj3l2es945szu8wd6mm9jnkj7wze2zwtagkhdmn62gxqnvz87d
    # To specify the amount Lovelaces to transfer to the script address
    amount:
      lovelace: 10000000
    # Plutus scripts requere a datum. You can directly write the datum hash
    # Or instead of that you can also write the datum directly.
    # In this case the input is the path to a file that has the typed specification
    # of the datum
    datumfile: "plutus-data/tuple_ints(-5,6)"
#+end_src

In this repo you can find the file used for this example in the path
=plutus-data/tuple_ints(-5,6)=, and it has this content.
#+begin_src javascript
{"constructor":0,"fields":[{"int":-5},{"int":6}]}
#+end_src

The script we send this transaction to is found in
=contracts/list-in-range.plutus=, it takes a two element tuple to define a
range. That's why the datum needs to be a tuple and we need to use the typed
version for the datum, because tuples are not available as JSON values.

When creating this transaction there are utility functions that help you with some input.
For example:
- =cardano-tx-helm-insert-utxos= all utxos that are in your wallet for easy input.
- =cardano-address-helm-inser= all your wallets, organized by name, but inputs the address
- =cardano-address-from-script= inputs a plutus script and loads to the killring the script address

To send the transaction just use shortcut =C-c C-c= or call =M-x cardano-tx-edit-finish=.

This transaction has the id
[[https://explorer.cardano-testnet.iohkdev.io/en/transaction?id=e65d3130fac4b95e150a4978d881830a490ef2a90fd9e7e9bcd936a741edceb6][e65d3130fac4b95e150a4978d881830a490ef2a90fd9e7e9bcd936a741edceb6]], and you can
find it on the testnet explorer.

*** Claiming from a Plutus script address
The plutus script in this example has this validator script
#+begin_src haskell
{-# INLINABLE rangeContract #-}
rangeContract :: (Integer, Integer) -> [Integer] -> ScriptContext -> P.Bool
rangeContract (l,h) redeemer _ = P.all (\x -> l P.<= x P.&& (x P.<= h)) redeemer

data RangeContract
instance Scripts.ValidatorTypes RangeContract where
    type instance DatumType RangeContract = (Integer, Integer)
    type instance RedeemerType RangeContract = [Integer]

rangeContractInstance :: Scripts.TypedValidator RangeContract
rangeContractInstance = Scripts.mkTypedValidator @RangeContract
    $$(PlutusTx.compile [|| rangeContract ||])
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @(Integer, Integer) @[Integer]
#+end_src

As you see we needed a two element tuple for the datum to define a range. The
redeemer must be a list of "arbitrary length", but all elements must be integers
within the range defined by the datum. This is exercise 4.d of the
Alonzo-testnet exercises.

One transaction that solves this constraint is:

#+begin_src yaml
inputs:
  # This is the UTxO that created in the previous section
  # Because it is a Plutus script. To unclock it we need to provide extra
  # information like the plutus script, datum and redeemer
  - utxo: e65d3130fac4b95e150a4978d881830a490ef2a90fd9e7e9bcd936a741edceb6#1
    # path to the script file
    script-file: "~/dev/cardano/emacs-wallet/contracts/list-in-range.plutus"
    # path to the typed datum
    datumfile: "~/dev/cardano/emacs-wallet/plutus-data/tuple_ints(-5,6)"
    # I can directy specify a json value. List are json values and thus
    # can be directly parsed. There is no need to write the typed version in a file.
    redeemer: [2, -5, -1, 4, 0, 3, 1, 6, -4]

# We need to declare a collateral UTxO for nodes to actually accept validating our transaction.
collateral: 010b59903cd3c254a7fbf16fbce49135c540e9857669904502dd69622bb29e5a#2

outputs:
  - address: addr_test1qpsfwsr4eqjfe49md9wpnyp3ws5emf4z3k6xqagvm880zgnk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qmkmv4t # first
    change: true
#+end_src

=C-c C-c= or calling =M-x cardano-tx-edit-finish=, builds and submits the
transaction.  In this case the transaction is
[[https://explorer.cardano-testnet.iohkdev.io/en/transaction?id=d5d22312f6716bcea1aeac89ffc500cc1f0d5e2449904c1600efe0b2d3168fd2][d5d22312f6716bcea1aeac89ffc500cc1f0d5e2449904c1600efe0b2d3168fd2]] and you can
find it on the testnet explorer.
