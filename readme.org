#+TITLE: Cardano transaction editor

This project is a running experiment and in Alpha stage. Don't rely on any of
its functions or interfaces to be stable, because I'm still testing this user
interface. Feedback is highly welcomed.

Warning aside, I and other Cardano users believe this is an awesome way to
interact with the Cardano blockchain, it frees you from the cumbersome CLI too
by offering you a declarative way to specify your transactions, without loosing
fine grain control.

This project has received support from the Cardano community, it is a Catalyst
Fund 7 funded project and a Plutus Pioneer Capstone challenge prize winner.

* Motivation
The command line is a great tool, yet if I ever write more than 4 words on the
command line I go crazy. The command line is, for me, a tool for quick queries
not a work environment.

Interacting with the Cardano blockchain happens through transactions. Creating a
transaction with the CLI gets really cumbersome as the transaction grows in
complexity and bash scripts just tame the problem for a while. Bash scripts
automate repetitive tasks at the cost of flexibility. Bash scripts are no
solution, because you are still bound by the one dimensionality of the command
line. Despite editing those scripts on an editor you must mark line breaks, and
keep track of quoting your variables and input.

I want a tool that lets me craft my transactions, a powerful tool to interact
with the cardano-node, which has all the features, does not get cumbersome as
you increase the complexity of your tasks, and empowers you as a user.

I couldn't find such a tool, thus I started building it myself. A text editable
interface to create my transactions in Cardano. A tool that embraces the power
of my text editor instead of the limitations of the command line.

* Video Demos
I host a YouTube Channel called [[https://www.youtube.com/channel/UCIGcTtEAq3aluoC5gRJjv5w/][Ars magna]] for my Cardano related projects. If in
doubt this project is for you, have a look at how it can change your workflow:

| Content               | link                                        | length |
|-----------------------+---------------------------------------------+--------|
| Spending transactions | https://www.youtube.com/watch?v=Sgvc3WaZlPY |   6:13 |
| Token minting         | https://www.youtube.com/watch?v=1hAv63NeJ-U |   9:22 |

* Installation
This project is not yet on MELPA, you must install it yourself and deal with all
dependencies as well.
** Dependencies
*** Cardano Node 1.33
You need a running Cardano node you can connect to.

The easiest way to get one setup for the public testnet is using this repository:
https://github.com/input-output-hk/testnet-summit-scripts

For Mainnet follow the standard guide
https://docs.cardano.org/getting-started/installing-the-cardano-node

*** Emacs 27
This is the latest release. Install it and also the following packages.

**** Required packages
- dash
- yaml
- yaml-mode
- yasnippet
- helm

*** This package itself
Clone this repository and make sure it is in your =EMACSLOADPATH=, then evaluate
the file =cardano-tx.el=.  If you use =use-package= you can use this.
#+begin_src emacs-lisp
(use-package cardano-tx
  :commands (cardano-tx-new cardano-cli-tip)
  :load-path "/path/to/this/repository")
#+end_src
* Configuration
There are some variables you need to configure.

#+begin_src emacs-lisp
;; Path to cli tool
(setq cardano-cli-command "/full/path/to/the/cardano-cli")
;; Path to the running node socket
(setq cardano-cli-node-socket "/full/path/to/the/testnet/socket")
;; These are the network arguments for the testnet
(setq cardano-cli-network-args '("--testnet-magic" "1097911063"))
;; When connecting to mainnet use
;; (setq cardano-cli-network-args '("--mainnet"))

;; This directory will store all your key pairs (verification & signinig) and
;; the addresses generated with those keys. It also holds your staking
;; key. BE sure this folder exists, It will not be created by this tool
;; Mind also to use separate directories for mainnet and testnets
(setq cardano-address-keyring-dir (expand-file-name "~/cardano-wallet-keys/"))
#+end_src
* Usage
Start by interactively querying the tip of the Blockchain. Use: =M-x
cardano-cli-tip=, you should see at the bottom of the screen on the mini-buffer
the information about the tip.

At the time of writing it showed this:
#+begin_src yaml
epoch: 158
hash: 8b6c54c50355c945c2c9fcf354869651d60c129c86fd1be3b8c3d35273352569
slot: 38212104
block: 2941331
era: Alonzo
syncProgress: 100.00
#+end_src
** Creating new key pairs and addresses
*** Bag of keys
To create new keys and their address use: =M-x cardano-address-new-key-files=.
It will prompt you how to name your new keys in your wallet. Type a name or many
space separated names. This will populate the directory you defined in
=cardano-address-keyring-dir=, with the keys. It will also create a staking key
for the directory and finally create the corresponding wallet addresses with the
staking key.

This means:
#+begin_src emacs-lisp
M-x cardano-address-new-key-files RET first second third RET
#+end_src
will generated the following folder structure

#+begin_src bash
~/cardano-wallet-keys/
├── first.addr
├── first.skey
├── first.vkey
├── second.addr
├── second.skey
├── second.vkey
├── stake.skey
├── stake.stake-addr
├── stake.vkey
├── third.addr
├── third.skey
└── third.vkey
#+end_src

Go ahead and fund any of these addresses
** Crafting a transaction
The goal is to directly create the transaction in your editor instead of using
the CLI commands when crafting of the transaction.

To launch the editor call =M-x cardano-tx-new=. It will list all the UTxOs that
you control on your wallet[fn:1]. Select one or many, you can still include more
into your transaction during the edit process later on. A new buffer opens with
the basic spending transaction template you can directly edit.

*** Spending and sending funds to arbitrary addresses
Have a look at the next annotated example. It is a larger than usual
transaction(2 inputs - 4 outputs), because the goal of this tool is to
demonstrate that it doesn't get cumbersome as the transaction scope grows. It is
a simple and standard yaml file. The structure reflects intuitively what the
transaction itself is about.  I'm sure you can understand it just by reading it.

#+begin_src yaml
# These are the inputs for the transaction.
inputs:
  - utxo: 4ea2254f4449af35b730b08f864663f1f0fd7a8a659e2fcf9a21fe891c2991d1#0
  - utxo: e0beb22982562e607019e6bb7f8cba200bba5f858c94bf6fd97ef4431ccb8be8#0

# Outputs are defined in the same way.
outputs:
  # A simple payment output to this address
  - address: addr_test1qr047xuayncdvsjdldy740a8l9hh6advdzex9nqtp4y3smtk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qqzhuv0
    amount:
      lovelace: 10000000

  # Payment to a Plutus script. The AlwaysSucceeds script
  - address: addr_test1wpnlxv2xv9a9ucvnvzqakwepzl9ltx7jzgm53av2e9ncv4sysemm8
    amount:
      lovelace: 15000000
    # You must include the datum. This tool calculates the hash for you.
    datum: [1, "the always succeeds contract", {"with a": "mixed type datum"}]

  # Payment to another Plutus script
  - address: addr_test1wzxfj3l2es945szu8wd6mm9jnkj7wze2zwtagkhdmn62gxqnvz87d
    amount:
      lovelace: 20000000
    # This script requires a typed datum, because the script input is a 2-tuple of ints
    # In this case the input is the path to a file that has the typed specification
    # of the datum
    datumfile: "plutus-data/tuple_ints(-5,6)"

  # ALWAYS think about your change address
  - address: addr_test1qpsfwsr4eqjfe49md9wpnyp3ws5emf4z3k6xqagvm880zgnk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qmkmv4t
    change: true # The cardano-cli balances it. Only lovelaces for now
#+end_src

Not only is it readable, you get the advantages of syntax highlight,
indentation, auto-completion and many more editing tools from the editor. You
can also write comments in between the lines, because yaml allows that. That is
not possible within a bash script using long commands with line breaks, you only
get to comment within blocks of instructions.

When creating this transaction there are utility functions that help you with some input.
For example:
- =cardano-tx-helm-utxos= Pick from utxos that are in your wallet for easy input.
- =cardano-address-helm= Pick from all your wallet addresses, organized by the key name
- =cardano-address-from-script= inputs a Plutus script and loads to the kill ring the script address

The Plutus scripts we send funds in this transaction are
=contracts/AlwaysSucceeds.plutus= and =contracts/list-in-range.plutus=. The
first takes any datum, the second takes a two element tuple to define a range.
That's why the datum needs to be a tuple, and why we need to use the typed
version for the datum, because tuples are not available as JSON values.

In this repository you can find the datum file used for this example in the path
=plutus-data/tuple_ints(-5,6)=, and it has this content.
#+begin_src javascript
{"constructor":0,"fields":[{"int":-5},{"int":6}]}
#+end_src

To send the transaction just use shortcut =C-c C-c= or call =M-x
cardano-tx-edit-finish=.  That will build the transaction, calculate the fees,
sign it, submit it, close the editing window and copy the transaction id to the
clipboard for you to look for it in your favorite explorer.

This transaction has the id
[[https://testnet.adatools.io/transactions/20d4494be79b860b1085fc5b763840d74c25c5e2ba05daeed664b3e674301b00][20d4494be79b860b1085fc5b763840d74c25c5e2ba05daeed664b3e674301b00]], and is on the
Testnet.
*** Minting native tokens
Minting tokens is again simple and doable with a single specification. Again,
exemplifying with a rather large transaction, where I'll mint two kinds of
tokens: a fungible token with unconstrained minting policy and a NFT policy.
Additionally, the NFT metadata will include its metadata.

Launch the editor with =M-x cardano-tx-new=, and pick some UTxOs to fund the
mint transaction. It is a big transaction, don't get overwhelmed by the forest
they are only trees. Follow the comments, a lot is going on in this transaction.

#+begin_src yaml
inputs:
  - utxo: 4fae4f6e9c80d6c56476e083e9562a867ab7a6cd6be4e694d1f0b0e0b8d97eee#0

# Minting policies are characterized by the policy-id, here you can name them,
# and use that name throughout the transaction. The editor will then replace the
# name for the policy-id when creating the transaction.

mint:
  # This first policy(reward-tokens) only requires one witness to mint. You can mint
  # anytime you want as long as you have the key. I can use them as reward points.
  # I can keep minting to reward users.
  reward-tokens: # This is my first policy name
    policy: # Declare the policy. A single signature is enough
      type: sig
      keyHash: df5f1b9d24f0d6424dfb49eabfa7f96f7d75ac68b262cc0b0d49186d # fourth
    assets: # Here is the amount of assets to mint. I name each of the tokens
      gold: 100
      platinum: 50
  # This second policy are two NFTs. It honors XKCD, and mints NFTs that link to
  # a particular comic. The minting policy requires 2 witnesses and has a time lock
  # to ensure that no more assets are minted under this policy after the slot passed
  xkcd: # this is the policy name
    policy:
      type: all
      scripts:
        - type: sig
          keyHash: a6eb2a117cc8c5a26a7895eb03f3c88d3d2391e34e988883327b9893 # second
        - type: sig
          keyHash: 9bcde05606b1fbd5f5390b3ebbba0f523bddba5822027c856ebc336a # third
        - type: before
          slot: 41770500 # this is the time lock
    assets: # Minting two unique NFTs
      networking: 1
      frustration: 1

# You need to help the tool when using scripts by enumerating which witnesses
# need to sign the transaction. These are the keys on your wallet. I commented
# in the previous scripts which keyHash maps to which key
# You don't need this hint on normal spending, because it can infer which key owns which UTxO.
witness:
  - second
  - third
  - fourth

# For Mary Era Timelocked NFTs don't forget to match the validity interval, with
# the one on the time lock policy
validity-interval:
  invalid-hereafter: 41770500
  # invalid before:

# The metadata here allows to describe the NFTs. You can then see them on an explorer
metadata:
  721:
    xkcd: # policy name
      networking: # token name
        id: 1
        name: "Networking"
        description: "Our company is agile and lean with a focus on the long tail."
        image: ipfs://Qmbu8L59m5YHxo7kSCnfZa9DLSApyLFXTpbcJo6tx8vzzq
      frustration: # token name
        id: 2
        name: "Frustration"
        description: "Don't worry, I can do it in under a minute."
        image: ipfs://QmdunoNVjXe8aLFHvPqWdjNZmSfQBnrhb1pPwLcEAJcVUR

# Finally the 4 output. I distribute the newly minted tokens across multiple addresses
outputs:
  - address: addr_test1vzdumczkq6clh4048y9nawa6pafrhhd6tq3qyly9d67rx6sq3zpq7 # third-enterprise
    amount:
      xkcd: # policy name
        networking: 1 # token name
      reward-tokens: # other policy name
        gold: 40 # corresponding token name
      lovelace: 10000000

  - address: addr_test1qznwk2s30nyvtgn20z27kqlnezxn6gu3ud8f3zyrxfae3ymk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qt6aaad # second
    amount:
      reward-tokens:
        gold: 60
        platinum: 15
      lovelace: 15678910

  - address: addr_test1qpsfwsr4eqjfe49md9wpnyp3ws5emf4z3k6xqagvm880zgnk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qmkmv4t
    amount:
      xkcd:
        frustration: 1
      reward-tokens:
        platinum: 35
      lovelace: 52468413

  # ALWAYS think about your change address
  - address: addr_test1qpsfwsr4eqjfe49md9wpnyp3ws5emf4z3k6xqagvm880zgnk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qmkmv4t
    change: true
#+end_src
Have a look at the transaction on an testnet explorer: [[https://testnet.adatools.io/transactions/9115ce93cc4afe074e79352de16671f9e85f77732406943ab05809180cdd282b][9115ce93cc4afe074e79352de16671f9e85f77732406943ab05809180cdd282b]]

Notice that the token names are still described by human readable strings. The
editor translates those names to hexadecimal values when creating the
transaction as required by the cardano-node=1.33.

*** Claiming from a Plutus script address
The Plutus script in this example has this validator script, and corresponds to
the script in the file =contracts/list-in-range.plutus=.

#+begin_src haskell
{-# INLINABLE rangeContract #-}
rangeContract :: (Integer, Integer) -> [Integer] -> ScriptContext -> P.Bool
rangeContract (l,h) redeemer _ = P.all (\x -> l P.<= x P.&& (x P.<= h)) redeemer

data RangeContract
instance Scripts.ValidatorTypes RangeContract where
    type instance DatumType RangeContract = (Integer, Integer)
    type instance RedeemerType RangeContract = [Integer]

rangeContractInstance :: Scripts.TypedValidator RangeContract
rangeContractInstance = Scripts.mkTypedValidator @RangeContract
    $$(PlutusTx.compile [|| rangeContract ||])
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @(Integer, Integer) @[Integer]
#+end_src

As you see we needed a two element tuple for the datum to define a range. The
redeemer must be a list of "arbitrary length", but all elements must be integers
within the range defined by the datum. This is exercise 4.d of the
Alonzo-testnet exercises.

One transaction that solves this constraint is:

#+begin_src yaml
inputs:
  # This is the UTxO that created in the previous section
  # Because it is a Plutus script. To unclock it we need to provide extra
  # information like the Plutus script, datum and redeemer
  - utxo: 20d4494be79b860b1085fc5b763840d74c25c5e2ba05daeed664b3e674301b00#3
    # path to the script file
    script-file: "contracts/list-in-range.plutus"
    # path to the typed datum
    datumfile: "plutus-data/tuple_ints(-5,6)"
    # I can directly specify a JSON value. List are JSON values and thus
    # can be directly parsed. There is no need to write the typed version in a file.
    redeemer: [2, -5, -1, 4, 0, 3, 1, 6, -4]

collateral: 20d4494be79b860b1085fc5b763840d74c25c5e2ba05daeed664b3e674301b00#1

outputs:
  # ALWAYS think about your change address
  - address:  addr_test1qpsfwsr4eqjfe49md9wpnyp3ws5emf4z3k6xqagvm880zgnk2wgk4wl2rz04eaqmq9fnxhyn56az0c4d3unvcvg2yw4qmkmv4t
    change: true
#+end_src

=C-c C-c= or calling =M-x cardano-tx-edit-finish=, builds and submits the
transaction.  In this case the transaction is
[[https://testnet.adatools.io/transactions/0e51486385a1d2cc811bf51fc27c73a609b87bfd8846955d1e67b358f44232e8][0e51486385a1d2cc811bf51fc27c73a609b87bfd8846955d1e67b358f44232e8]] and you can
find it on the testnet explorer.

That's it. This tool reflects the transaction crafting with a User Interface,
that is the transaction itself and takes care of all the details about parsing
the input, signing and submitting.
* Extra info
This an awarded project of the Cardano Summit 2021 - Plutus Pioneer Capstone
Challenge. You can read about it on the [[https://iohk.io/en/blog/posts/2021/10/12/building-on-the-cardano-summit/][IOHK blog]], and watch the [[https://www.youtube.com/watch?v=R0s3lPG8XDw&t=620s][interview]] with
some of the winners. I hope it raises awareness of this tool and also to call
attention to my Catalyst proposal to fund the further development of this tool.

Unfortunately, it did not receive enough community support for Fund 6. Yet, I'm
releasing most of the work done in advance. I will re-apply on the next funding
round.

https://cardano.ideascale.com/a/dtd/Transaction-editor-to-replace-cli/370256-48088


The transaction preview function only works if you compile the cardano-cli-1.29
with this extra patch.
https://github.com/input-output-hk/cardano-node/pull/3082#issuecomment-899083656

* Footnotes

[fn:1] Finding the UTxOs takes a while and thus your editor blocks during that
time. Since the cardano-node=1.33 the UTxO set moved from RAM to Disk and that
makes this query even slower.
